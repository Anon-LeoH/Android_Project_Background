var path = require('path');
var url = require('url');
var queryString = require('querystring');
var db = require('./dbopt');
var dataType = require('./dataType');
var uuid = require('node-uuid');

var KEY_ERROR = 'keyError';
var KEY_ERROR_INFO = 'User Key not Match!';
var DB_ERROR = 'dbError';
var DB_ERROR_INFO = 'Error Occur When Connecting Service!';
var ALREADY_FRIEND_ERROR = 'friError';
var ALREADY_FRIEND_ERROR_INFO = 'This Guy is Already Your Friend!';

function randomInt (low, high) {
    return Math.floor(Math.random() * (high - low) + low);
}

var template = {
  'errno': function(argv, data) {
    return {err: 0, type: 'suc'};
  },
  'error': function(argv, data) {
    return {err: 1, type: argv, errInfo: data};
  }
  'info': function(argv, data) {
    return {err: 0, type: argv, info: data};
  }
}

function sendTask(tid) {
  db.findOne('task', dataType.task.getInstance({'ID': tid}), function(res, errno) {
    var uid = res.owner;
      db.findOne('user', dataType.user.getInstance({'ID': uid}), function(r, errno) {
        var idx = randomInt(0, r.fri.length);
        res.target = r.fri[idx];
        db.update('task', res, fucntion(rlt, err){});
        db.insert('request', dataType.request.getInstance({
          'ID': uuid.v4(),
          'type': 'tsk',
          'target': tid,
          'recv': res.target
        }), function(rlt, err){});
      });
  });
}

function checkKey(uid, key, cb) {
  var data = {ID: uid, _key: key};
  db.findOne('user', dataType.user.getInstance(data), function(res, errno) {
    if (errno) cb(true);
    else cb(false);
  });
}

function returnMsg(res, type, argv = null, data = null) {
  var msg = template[type](argv, data);
  msg = JSON.stringify(msg);
  res.writeHead(200, {"Content-Type": "text/plain"});
  res.write(msg);
  res.end();
}

// Tool ends here

function getNews(req, res) {
  var query = url.parse(req.url).query;
  query = queryString.parse(query);
  var uid = query.uid;
  var key = query.key;
  checkKey(uid, key, function(rlt) {
    if (!rlt) {
      returnMsg(res, 'error', KEY_ERROR, KEY_ERROR_INFO);
      return;
    }
    var tmp = dataType.request.getInstance({'recv': uid});
    db.find('request', tmp, function(rlt, err) {
      if (err) {
        returnMsg(res, 'error', DB_ERROR, DB_ERROR_INFO);
      } else {
        var tmp = {
          fri: [],
          conf: [],
          tsk: []
        };
        for (i = 0; i < rlt.length; i++) {
          tmp[rlt[i].type].push(rlt[i].toOutput);
        }
        returnMsg(res, 'info', 'news', tmp);
      }
    });
  });
}

function getUserInfo(req, res) {
  var query = url.parse(req.url).query;
  query = queryString.parse(query);
  var uid = query.uid;
  var key = query.key;
  var target = query.target;
  checkKey(uid, key, function(rlt) {
    if (!rlt) {
      returnMsg(res, 'error', KEY_ERROR, KEY_ERROR_INFO);
      return;
    }
    var tmp = dataType.user.getInstance({'ID': target});
    db.findOne('user', tmp, function(rlt, err) {
      if (err) {
        returnMsg(res, 'error', DB_ERROR, DB_ERROR_INFO);
      } else {
        var tmp;
        if (uid == target) tmp = rlt.toSelfView();
        else tmp = rlt.toOtherView();
        returnMsg(res, 'info', 'user', tmp);
      }
    });
  });
}

function getTaskInfo(req, res) {
  var query = url.parse(req.url).query;
  query = queryString.parse(query);
  var uid = query.uid;
  var key = query.key;
  var target = query.target;
  checkKey(uid, key, function(rlt) {
    if (!rlt) {
      returnMsg(res, 'error', KEY_ERROR, KEY_ERROR_INFO);
      return;
    }
    var tmp = dataType.task.getInstance({'ID': target});
    db.findOne('task', tmp, function(rlt, err) {
      if (err) {
        returnMsg(res, 'error', DB_ERROR, DB_ERROR_INFO);
      } else {
        returnMsg(res, 'info', 'task', rlt.toOutput());
      }
    });
  });
}

function addFriend(req, res) {
  var query = url.parse(req.url).query;
  query = queryString.parse(query);
  var uid = query.uid;
  var key = query.key;
  var target = query.target;
  checkKey(uid, key, function(rlt) {
    if (!rlt) {
      returnMsg(res, 'error', KEY_ERROR, KEY_ERROR_INFO);
      return;
    }
    var tmp = dataType.user.getInstance({'ID': uid});
    db.findOne('user', tmp, function(rlt, err) {
      if (err) {
        returnMsg(res, 'error', DB_ERROR, DB_ERROR_INFO);
      } else {
        if (rlt.fri.indexOf(target) != -1) {
          returnMsg(res, 'error', ALREADY_FRIEND_ERROR, ALREADY_FRIEND_ERROR_INFO);
        } else {
          var tmp = dataType.request.getInstance({'target': uid, 'recv': target});
          db.findOne('request', tmp, function(rlt, err) {
            if (rlt) {
              returnMsg(res, 'errno', null, null);
            } else {
              var tmp = dataType.request.getInstance({'target': target, 'recv': uid});
              db.findOne('request', tmp, function(rlt, err) {
                if (rlt) {
                  db.remove('request', rlt, function(rlt, err) {
                    returnMsg(res, 'info', 'getFriend', null);
                  });
                } else {
                  db.insert('request', dataType.request.getInstance({
                     'ID': uuid.v4(),
                     'type': 'fri',
                     'target': uid,
                     'recv': target
                  }), function(rlt, err) {
                    if (!rlt) returnMsg(res, 'error', DB_ERROR, DB_ERROR_INFO);
                    else returnMsg(res, 'errno', null, null);
                  });
                }
              });
            }
          });
        }
      }
    });
  });
}

function confirmTask(req, res) {
  var query = url.parse(req.url).query;
  query = queryString.parse(query);
  var uid = query.uid;
  var key = query.key;
  var target = query.target;
  checkKey(uid, key, function(rlt) {
    if (!rlt) {
      returnMsg(res, 'error', KEY_ERROR, KEY_ERROR_INFO);
      return;
    }
    var tmp = dataType.task.getInstance({'ID': target});
    db.findOne('task', tmp, function(rlt, err) {
      if (err) {
        returnMsg(res, 'error', DB_ERROR, DB_ERROR_INFO);
      } else {
        if (rlt.owner == uid) {
          if (!rlt.ownFin) {
            rlt.ownFin = true;
            rlt.tarFin = true;
            db.remove('request', dataType.request.getInstance({'target': rlt.ID}), function(r, err) {
              db.update('task', rlt, function(rlt, err) {
                if (!rlt) {
                  returnMsg(res, 'error', DB_ERROR, DB_ERROR_INFO);
                } else {
                  returnMsg(res, 'errno', null, null);
                }
              });
            });
          } else {
            returnMsg(res, 'error', DB_ERROR, DB_ERROR_INFO);
          }
        } else if (rlt.target == uid) {
          if (!rlt.tarFin) {
            rlt.tarFin = true;
            db.remove('request', dataType.request.getInstance({'target': rlt.ID, 'recv': uid}), function(r, err) {
              db.update('task', rlt, function(rlt, err) {
                if (!rlt) {
                  returnMsg(res, 'error', DB_ERROR, DB_ERROR_INFO);
                } else {
                  returnMsg(res, 'errno', null, null);
                }
              });
            });
          } else {
            returnMsg(res, 'error', DB_ERROR, DB_ERROR_INFO);
          }
        } else {
          returnMsg(res, 'error', PERMISSION_ERROR, PERMISSION_ERROR_INFO);
        }
      }
    });
  });
}

function removeFriend(req, res) {
  var query = url.parse(req.url).query;
  query = queryString.parse(query);
  var uid = query.uid;
  var key = query.key;
  var target = query.target;
  checkKey(uid, key, function(rlt) {
    if (!rlt) {
      returnMsg(res, 'error', KEY_ERROR, KEY_ERROR_INFO);
      return;
    }
    var tmp = dataType.user.getInstance({'ID': uid});
    db.findOne('user', tmp, function(rlt, err) {
      if (err) {
        returnMsg(res, 'error', DB_ERROR, DB_ERROR_INFO);
      } else {
        if (rlt.fri.indexOf(target) != -1) {
          rlt.fri.splice(rlt.fir.indexOf(target), 1);
          var tmp = dataType.user.getInstance({'ID': target});
          db.findOne('user', tmp, function(r, err) {
            r.fri.splice(r.fri.indexOf(uid), 1);
            db.update('user', rlt, function(rlt, err) {
              db.update('user', r, function(rlt, err) {
                returnMsg(res, 'errno', null, null);
              })
            })
          });
        } else {
          returnMsg(res, 'error', DB_ERROR, DB_ERROR_INFO);
        }
      }
    });
  });
}

function removeTask(req, res) {
  var query = url.parse(req.url).query;
  query = queryString.parse(query);
  var uid = query.uid;
  var key = query.key;
  var target = query.target;
  checkKey(uid, key, function(rlt) {
    if (!rlt) {
      returnMsg(res, 'error', KEY_ERROR, KEY_ERROR_INFO);
      return;
    }
    var tmp = dataType.task.getInstance({'ID': target});
    db.findOne('task', tmp, function(rlt, err) {
      if (err) {
        returnMsg(res, 'error', DB_ERROR, DB_ERROR_INFO);
      } else {
        if (rlt.owner == uid) {
          db.remove('task', rlt, function(rlt, err){});
          db.remove('request', dataType.request.getInstance({
            'target': target,
            'recv': rlt.target
          }), function(rlt, err){});
          returnMsg(res, 'errno', null, null);
        } else if (rlt.target == uid) {
          db.remove('request', dataType.request.getInstance({
            'target': target,
            'recv': rlt.target
          }), function(rlt, err){});
          sendTask(rlt.ID);
          returnMsg(res, 'errno', null, null);
        } else {
          returnMsg(res, 'error', DB_ERROR, DB_ERROR_INFO);
        }
      }
    });
  });
}

function logout(req, res) {
  var query = url.parse(req.url).query;
  query = queryString.parse(query);
  var uid = query.uid;
  var key = query.key;
  checkKey(uid, key, function(rlt) {
    if (!rlt) {
      returnMsg(res, 'error', KEY_ERROR, KEY_ERROR_INFO);
      return;
    }
    var tmp = dataType.user.getInstance({'ID': uid});
    db.findOne('user', tmp, function(rlt, err) {
      if (err) {
        returnMsg(res, 'error', DB_ERROR, DB_ERROR_INFO);
      } else {
        rlt._key = null;
        db.update('user', rlt, function(rlt, err){});
        returnMsg(res, 'errno', null, null);
      }
    });
  });
}

// GET ends here

  tool.fetchPostData(req, function(data) {
    var sid = data.sid;
    var psw = data.psw;
    db.check(sid, psw, function(rlt, grp) {
      if (!rlt) {
        resPage.login(res);
        return;
      }
      var tmp = cls_user.newUser(sid, grp);
      pages[sid] = cls_page.newPage(tmp);
      resPage.index(res, sid);
      return;
    });
  });

function index(req, res, cookies) {
  var sid = cookies.sid;
  if (sid == undefined || pages[sid] == undefined || pages[sid] == '') {
    resPage.login(res);
    return;
  }
  resPage.index(res, sid);
}

function infoPage(req, res, cookies) {
  var sid = cookies.sid;
  if (sid == undefined || pages[sid] == undefined || pages[sid] == '') {
    resPage.login(res);
    return;
  }
  var query = url.parse(req.url).query;
  query = queryString.parse(query);
  var sid = query.sid;
  resPage.info(res, cookies.sid, sid);
}

function chgInfo(req, res, cookies) {
  var sid = cookies.sid;
  if (sid == undefined || pages[sid] == undefined || pages[sid] == '') {
    resPage.login(res);
    return;
  }
  tool.fetchPostData(req, function(tmpUser) {
    if (pages[sid].user.changeInfo(tmpUser)) {
      resPage.suc(res, sid, '/home');
    } else {
      resPage.fld(res, sid, '/home');
    }
    cls_user.userInit();
    pages[sid].basicInfo = tool.formBasicInfo(pages[sid].user);
  });
}

function signOut(req, res, cookies) {
  var sid = cookies.sid;
  if (sid == undefined || pages[sid] == undefined || pages[sid] == '') {
    resPage.login(res);
    return;
  }
  pages[sid] = '';
  resPage.login(res);
}

function addTA(req, res, cookies) {
  var sid = cookies.sid;
  if (sid == undefined || pages[sid] == undefined || pages[sid] == '') {
    resPage.login(res);
    return;
  }
  if (pages[sid].user.group == '1') {
    resPage.index(res, sid);
    return;
  }
  tool.fetchPostData(req, function(tmpUser) {
    if (db.addTA(tmpUser)) {
      resPage.suc(res, sid, '/home');
    } else {
      resPage.fld(res, sid, '/home');
    }
  });
  cls_user.userInit();
}

function deleteTA(req, res, cookies) {
  var sid = cookies.sid;
  if (sid == undefined || pages[sid] == undefined || pages[sid] == '') {
    resPage.login(res);
    return;
  }
  if (pages[sid].user.group == '1') {
    resPage.index(res, sid);
    return;
  }
  var query = url.parse(req.url).query;
  query = queryString.parse(query);
  var dsid = query.sid;
  if (db.deleteTA(dsid)) {
    pages[dsid] = '';
    resPage.suc(res, sid, '/home');
  } else {
    resPage.fld(res, sid, '/home');
  }
  cls_user.userInit();
}

function workStart(req, res, cookies) {
  var sid = cookies.sid;
  if (sid == undefined || pages[sid] == undefined || pages[sid] == '') {
    resStr.str(res, 'illegal');
    return;
  }
  tool.fetchPostData(req, function(data) {
    if (data.st_time == undefined) {
      tool.strRespond(res, 'failed');
      return;
    }
    var st_time = parseInt(data.st_time);
    resStr.start(res, sid, st_time);
    return;
  });
}

function workEnd(req, res, cookies) {
  var sid = cookies.sid;
  if (sid == undefined || pages[sid] == undefined || pages[sid] == '') {
    resStr.str(res, 'illegal');
    return;
  }
  tool.fetchPostData(req, function(data) {
    var ed_time = data.ed_time;
    var checkCode = data.checkCode;
    var log = data;
    resStr.end(res, sid, ed_time, log, checkCode);
    return;
  });
}

function logPage(req, res, cookies) {
  var sid = cookies.sid;
  if (sid == undefined || pages[sid] == undefined || pages[sid] == '') {
    resPage.login(res);
    return;
  }
  if (pages[sid].user.group == '1') {
    resPage.index(res, sid);
    return;
  }
  var query = url.parse(req.url).query;
  query = queryString.parse(query);
  var ed_time = new Date();
  pages[sid].user.refreshUndoList();
  if (query.ed_time != undefined) {
    ed_time = new Date(query.ed_time);
  }
  pages[sid].user.handleLog(ed_time);
  resPage.log(res, sid);
  return;
}

function handleLog(req, res, cookies) {
  var sid = cookies.sid;
  if (sid == undefined || pages[sid] == undefined || pages[sid] == '') {
    resPage.login(res);
    return;
  }
  if (pages[sid].user.group == '1') {
    resPage.index(res, sid);
    return;
  }
  pages[sid].user.markAllDone();
  resPage.suc(res, sid, '/home');
}

function userLog(req, res, cookies) {
  var sid = cookies.sid;
  if (sid == undefined || pages[sid] == undefined || pages[sid] == '') {
    resPage.login(res);
    return;
  }
  var query = url.parse(req.url).query;
  query = queryString.parse(query);
  var sid = query.sid;
  resPage.ulog(res, cookies.sid, sid);
}

exports.index = index;
exports.signIn = signIn;
exports.signOut = signOut;
exports.infoPage = infoPage;
exports.logPage = logPage;
exports.userLog = userLog;
exports.handleLog = handleLog;
exports.workStart = workStart;
exports.workEnd = workEnd;
exports.chgInfo = chgInfo;
exports.addTA = addTA;
exports.deleteTA = deleteTA;

